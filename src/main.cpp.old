#include <Arduino.h>
/*
    Video: https://www.youtube.com/watch?v=oCMOYS71NIU
    Based on Neil Kolban example for IDF: https://github.com/nkolban/esp32-snippets/blob/master/cpp_utils/tests/BLE%20Tests/SampleNotify.cpp
    Ported to Arduino ESP32 by Evandro Copercini
    updated by chegewara

   Create a BLE server that, once we receive a connection, will send periodic notifications.
   The service advertises itself as: 4fafc201-1fb5-459e-8fcc-c5c9c331914b
   And has a characteristic of: beb5483e-36e1-4688-b7f5-ea07361b26a8

   The design of creating the BLE server is:
   1. Create a BLE Server
   2. Create a BLE Service
   3. Create a BLE Characteristic on the Service
   4. Create a BLE Descriptor on the characteristic
   5. Start the service.
   6. Start advertising.

   A connect hander associated with the server starts a background task that performs notification
   every couple of seconds.
*/
//#include <ArduinoBLE.h>
#include <BLEDevice.h>
#include <BLEServer.h>
#include <BLEUtils.h>
#include <BLE2902.h>

BLEServer *pServer = NULL;
BLECharacteristic *CyclingPowerFeature = NULL;
BLECharacteristic *CyclingPowerMeasurement = NULL;
BLECharacteristic *CyclingPowerSensorLocation = NULL;
bool deviceConnected = false;
bool oldDeviceConnected = false;
uint32_t value = 0;

unsigned char bleBuffer[8];
unsigned char slBuffer[1];
unsigned char fBuffer[4];
short power = 0;
unsigned short revolutions = 0;
unsigned short timestamp = 0;
unsigned short flags = 0x20;
byte sensorlocation = 0x0D;
long lastTime = 0;

// See the following for generating UUIDs:
// https://www.uuidgenerator.net/

#define SERVICE_UUID "1818" // Cycling Power Service UUID

// BLEService CyclePowerService("1818");
// BLECharacteristic CyclePowerFeature("2A65", 0x02, 4);
// BLECharacteristic CyclePowerMeasurement("2A63", 0x02 | 0x10, 8);
// BLECharacteristic CyclingPowerSensorLocation("2A5D", 0x02, 1);

class MyServerCallbacks : public BLEServerCallbacks
{
  void onConnect(BLEServer *pServer)
  {
    deviceConnected = true;
  };

  void onDisconnect(BLEServer *pServer)
  {
    deviceConnected = false;
  }
};

//delays for X ms, should not block execution
void softDelay(unsigned long delayTime) {
  unsigned long startTime = millis();
  while ((millis() - startTime) < delayTime) {
    //wait
  }
}


void setup()
{
  Serial.begin(115200);

  // Create the BLE Device
  BLEDevice::init("ESP32_Yesoul");

  // Create the BLE Server
  pServer = BLEDevice::createServer();
  pServer->setCallbacks(new MyServerCallbacks());

  // Create the BLE Service
  BLEService *pService = pServer->createService(SERVICE_UUID);

  // Create a BLE Characteristic
  CyclingPowerFeature = pService->createCharacteristic("2A65", BLECharacteristic::PROPERTY_READ);                                          //Cycling power feature
  CyclingPowerMeasurement = pService->createCharacteristic("2A63", BLECharacteristic::PROPERTY_READ | BLECharacteristic::PROPERTY_NOTIFY); //Cycling power 
  CyclingPowerSensorLocation = pService->createCharacteristic("2A5D", BLECharacteristic::PROPERTY_READ);                                   //Cycling power 
                                                                                                                                           // CHARACTERISTIC_UUID,
                                                                                                                                           // BLECharacteristic::PROPERTY_READ |
                                                                                                                                           //     BLECharacteristic::PROPERTY_WRITE |
                                                                                                                                           //     BLECharacteristic::PROPERTY_NOTIFY |
                                                                                                                                           //     BLECharacteristic::PROPERTY_INDICATE);

  // https://www.bluetooth.com/specifications/gatt/viewer?attributeXmlFile=org.bluetooth.descriptor.gatt.client_characteristic_configuration.xml
  // Create a BLE Descriptor
  // CyclingPowerFeature->addDescriptor(new BLE2902());
  // CyclingPowerMeasurement->addDescriptor(new BLE2902());
  // CyclingPowerSensorLocation->addDescriptor(new BLE2902());

  // Start the service
  pService->start();

  // Start advertising
  BLEAdvertising *pAdvertising = BLEDevice::getAdvertising();
  pAdvertising->addServiceUUID(SERVICE_UUID);
  pAdvertising->setScanResponse(false);
  pAdvertising->setMinPreferred(0x0); // set value to 0x00 to not advertise this parameter
  BLEDevice::startAdvertising();
  Serial.println("Waiting a client connection to notify...");

  lastTime = millis();
}

void loop()
{
  // notify changed value
  if (deviceConnected)
  {
    bleBuffer[0] = flags & 0xff;
    bleBuffer[1] = (flags >> 8) & 0xff;
    bleBuffer[2] = power & 0xff;
    bleBuffer[3] = (power >> 8) & 0xff;
    bleBuffer[4] = revolutions & 0xff;
    bleBuffer[5] = (revolutions >> 8) & 0xff;
    bleBuffer[6] = timestamp & 0xff;
    bleBuffer[7] = (timestamp >> 8) & 0xff;

    slBuffer[0] = sensorlocation & 0xff;

    fBuffer[0] = 0x00;
    fBuffer[1] = 0x00;
    fBuffer[2] = 0x00;
    fBuffer[3] = 0x08;
    CyclingPowerFeature->setValue(fBuffer, 4);
    CyclingPowerMeasurement->setValue(bleBuffer, 8);
    CyclingPowerSensorLocation->setValue(slBuffer, 1);
    // CyclingPowerMeasurement->setValue((uint8_t *)&value, 4);
    CyclingPowerMeasurement->notify();
    power++;
    revolutions++;
    if (millis() - lastTime >= 500)
    {
      timestamp = timestamp + 1024;
      lastTime = millis();
    }
    Serial.printf("Power = %i | RPM = %i | TimeStamp = %i", power, revolutions, timestamp);
    Serial.println("");
    value++;
    softDelay(500); // bluetooth stack will go into congestion, if too many packets are sent, in 6 hours test i was able to go as low as 3ms
  }
  // disconnecting
  if (!deviceConnected && oldDeviceConnected)
  {
    softDelay(500);                  // give the bluetooth stack the chance to get things ready
    pServer->startAdvertising(); // restart advertising
    Serial.println("start advertising");
    oldDeviceConnected = deviceConnected;
  }
  // connecting
  if (deviceConnected && !oldDeviceConnected)
  {
    // do stuff here on connecting
    oldDeviceConnected = deviceConnected;
  }
}